# Makefile.in generated by automake 1.16.5 from Makefile.am.
# demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/oomph-lib
pkgincludedir = $(includedir)/oomph-lib
pkglibdir = $(libdir)/oomph-lib
pkglibexecdir = $(libexecdir)/oomph-lib
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
check_PROGRAMS = pretend_melt$(EXEEXT) spring_contact$(EXEEXT) \
	melt$(EXEEXT) two_d_unsteady_heat$(EXEEXT) \
	stefan_boltzmann$(EXEEXT) stefan_boltzmann_melt$(EXEEXT) \
	solid_contact$(EXEEXT) circular_boulder_melt$(EXEEXT) \
	circular_boulder_solar_radiation$(EXEEXT) \
	solid_contact_with_gravity_structured$(EXEEXT) \
	solid_contact_with_gravity_unstructured$(EXEEXT) \
	linear_solid_contact_with_gravity_structured$(EXEEXT) \
	linear_solid_contact_with_gravity_unstructured$(EXEEXT) \
	heated_linear_solid_contact_with_gravity$(EXEEXT) \
	spring_contact2$(EXEEXT)
subdir = demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/configure.ac_scripts/automake_init_command_file \
	$(top_srcdir)/config/configure.ac_scripts/makefile_list \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am_circular_boulder_melt_OBJECTS = circular_boulder_melt.$(OBJEXT)
circular_boulder_melt_OBJECTS = $(am_circular_boulder_melt_OBJECTS)
am__DEPENDENCIES_1 =
circular_boulder_melt_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
am_circular_boulder_solar_radiation_OBJECTS =  \
	circular_boulder_solar_radiation.$(OBJEXT)
circular_boulder_solar_radiation_OBJECTS =  \
	$(am_circular_boulder_solar_radiation_OBJECTS)
circular_boulder_solar_radiation_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_heated_linear_solid_contact_with_gravity_OBJECTS =  \
	heated_linear_solid_contact_with_gravity.$(OBJEXT)
heated_linear_solid_contact_with_gravity_OBJECTS =  \
	$(am_heated_linear_solid_contact_with_gravity_OBJECTS)
heated_linear_solid_contact_with_gravity_DEPENDENCIES =  \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_linear_solid_contact_with_gravity_structured_OBJECTS = linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.$(OBJEXT)
linear_solid_contact_with_gravity_structured_OBJECTS =  \
	$(am_linear_solid_contact_with_gravity_structured_OBJECTS)
linear_solid_contact_with_gravity_structured_DEPENDENCIES =  \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
linear_solid_contact_with_gravity_structured_LINK = $(LIBTOOL) \
	$(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) \
	$(linear_solid_contact_with_gravity_structured_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_linear_solid_contact_with_gravity_unstructured_OBJECTS =  \
	linear_solid_contact_with_gravity.$(OBJEXT)
linear_solid_contact_with_gravity_unstructured_OBJECTS =  \
	$(am_linear_solid_contact_with_gravity_unstructured_OBJECTS)
linear_solid_contact_with_gravity_unstructured_DEPENDENCIES =  \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_melt_OBJECTS = melt.$(OBJEXT)
melt_OBJECTS = $(am_melt_OBJECTS)
melt_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_pretend_melt_OBJECTS = pretend_melt.$(OBJEXT)
pretend_melt_OBJECTS = $(am_pretend_melt_OBJECTS)
pretend_melt_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_solid_contact_OBJECTS = solid_contact.$(OBJEXT)
solid_contact_OBJECTS = $(am_solid_contact_OBJECTS)
solid_contact_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_solid_contact_with_gravity_structured_OBJECTS = solid_contact_with_gravity_structured-solid_contact_with_gravity.$(OBJEXT)
solid_contact_with_gravity_structured_OBJECTS =  \
	$(am_solid_contact_with_gravity_structured_OBJECTS)
solid_contact_with_gravity_structured_DEPENDENCIES =  \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
solid_contact_with_gravity_structured_LINK = $(LIBTOOL) $(AM_V_lt) \
	--tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \
	$(CXXLD) $(solid_contact_with_gravity_structured_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_solid_contact_with_gravity_unstructured_OBJECTS =  \
	solid_contact_with_gravity.$(OBJEXT)
solid_contact_with_gravity_unstructured_OBJECTS =  \
	$(am_solid_contact_with_gravity_unstructured_OBJECTS)
solid_contact_with_gravity_unstructured_DEPENDENCIES =  \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_spring_contact_OBJECTS = spring_contact.$(OBJEXT)
spring_contact_OBJECTS = $(am_spring_contact_OBJECTS)
spring_contact_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_spring_contact2_OBJECTS = spring_contact2.$(OBJEXT)
spring_contact2_OBJECTS = $(am_spring_contact2_OBJECTS)
spring_contact2_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_stefan_boltzmann_OBJECTS = stefan_boltzmann.$(OBJEXT)
stefan_boltzmann_OBJECTS = $(am_stefan_boltzmann_OBJECTS)
stefan_boltzmann_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_stefan_boltzmann_melt_OBJECTS = stefan_boltzmann_melt.$(OBJEXT)
stefan_boltzmann_melt_OBJECTS = $(am_stefan_boltzmann_melt_OBJECTS)
stefan_boltzmann_melt_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_two_d_unsteady_heat_OBJECTS = two_d_unsteady_heat.$(OBJEXT)
two_d_unsteady_heat_OBJECTS = $(am_two_d_unsteady_heat_OBJECTS)
two_d_unsteady_heat_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/circular_boulder_melt.Po \
	./$(DEPDIR)/circular_boulder_solar_radiation.Po \
	./$(DEPDIR)/heated_linear_solid_contact_with_gravity.Po \
	./$(DEPDIR)/linear_solid_contact_with_gravity.Po \
	./$(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po \
	./$(DEPDIR)/melt.Po ./$(DEPDIR)/pretend_melt.Po \
	./$(DEPDIR)/solid_contact.Po \
	./$(DEPDIR)/solid_contact_with_gravity.Po \
	./$(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po \
	./$(DEPDIR)/spring_contact.Po ./$(DEPDIR)/spring_contact2.Po \
	./$(DEPDIR)/stefan_boltzmann.Po \
	./$(DEPDIR)/stefan_boltzmann_melt.Po \
	./$(DEPDIR)/two_d_unsteady_heat.Po
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(circular_boulder_melt_SOURCES) \
	$(circular_boulder_solar_radiation_SOURCES) \
	$(heated_linear_solid_contact_with_gravity_SOURCES) \
	$(linear_solid_contact_with_gravity_structured_SOURCES) \
	$(linear_solid_contact_with_gravity_unstructured_SOURCES) \
	$(melt_SOURCES) $(pretend_melt_SOURCES) \
	$(solid_contact_SOURCES) \
	$(solid_contact_with_gravity_structured_SOURCES) \
	$(solid_contact_with_gravity_unstructured_SOURCES) \
	$(spring_contact_SOURCES) $(spring_contact2_SOURCES) \
	$(stefan_boltzmann_SOURCES) $(stefan_boltzmann_melt_SOURCES) \
	$(two_d_unsteady_heat_SOURCES)
DIST_SOURCES = $(circular_boulder_melt_SOURCES) \
	$(circular_boulder_solar_radiation_SOURCES) \
	$(heated_linear_solid_contact_with_gravity_SOURCES) \
	$(linear_solid_contact_with_gravity_structured_SOURCES) \
	$(linear_solid_contact_with_gravity_unstructured_SOURCES) \
	$(melt_SOURCES) $(pretend_melt_SOURCES) \
	$(solid_contact_SOURCES) \
	$(solid_contact_with_gravity_structured_SOURCES) \
	$(solid_contact_with_gravity_unstructured_SOURCES) \
	$(spring_contact_SOURCES) $(spring_contact2_SOURCES) \
	$(stefan_boltzmann_SOURCES) $(stefan_boltzmann_melt_SOURCES) \
	$(two_d_unsteady_heat_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/makefile_templates/demo_drivers \
	$(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} '/home/runner/work/oomph-lib/oomph-lib/missing' aclocal-1.16
AMTAR = $${TAR-tar}

# Include path for library headers: All library headers live in 
# the include directory which we specify with -I
AM_CPPFLAGS = -isystem /home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation/include -DOOMPH_HAS_BOOST -isystem /home/runner/work/oomph-lib/oomph-lib/external_distributions/gmp/gmp_default_installation/include -DOOMPH_HAS_GMP -isystem /home/runner/work/oomph-lib/oomph-lib/external_distributions/mpfr/mpfr_default_installation/include -DOOMPH_HAS_MPFR -isystem /home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation/include -DOOMPH_HAS_CGAL -DOOMPH_HAS_STACKTRACE -DOOMPH_HAS_UNISTDH -DOOMPH_HAS_FPUCONTROLH -DOOMPH_HAS_MALLOCH -DOOMPH_HAS_TRIANGLE_LIB -DOOMPH_HAS_TETGEN_LIB -DUSING_OOMPH_SUPERLU -DUSING_OOMPH_SUPERLU_DIST -I${prefix}/include
AM_CXXFLAGS = -DgFortran
AM_DEFAULT_VERBOSITY = 1
AM_FFLAGS = 
AM_LDFLAGS = -L/home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation/lib -Wl,-rpath,/home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation/lib -L/home/runner/work/oomph-lib/oomph-lib/external_distributions/gmp/gmp_default_installation/lib -L/home/runner/work/oomph-lib/oomph-lib/external_distributions/mpfr/mpfr_default_installation/lib -L/home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation/lib -Wl,-rpath,/home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation/lib
AR = ar
AUTOCONF = ${SHELL} '/home/runner/work/oomph-lib/oomph-lib/missing' autoconf
AUTOHEADER = ${SHELL} '/home/runner/work/oomph-lib/oomph-lib/missing' autoheader
AUTOMAKE = ${SHELL} '/home/runner/work/oomph-lib/oomph-lib/missing' automake-1.16
AWK = gawk
BLACS_LIB = 
BLAS_LIB = 
BOOST_DIR = /home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation
BOOST_INCLUDE = /home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation/include
BOOST_LIB = /home/runner/work/oomph-lib/oomph-lib/external_distributions/boost/boost_default_installation/lib
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -Wall
CGAL_DIR = /home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation
CGAL_INCLUDE = /home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation/include
CGAL_LIB = /home/runner/work/oomph-lib/oomph-lib/external_distributions/cgal/cgal_default_installation/lib
CGAL_PERMANENT_INSTALLATION_DIR = 
CPP = gcc -E
CPPFLAGS = 
CSCOPE = cscope
CTAGS = ctags
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -DPARANOID -Wall
CXXLD = $(CXX)
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ETAGS = etags
EXEEXT = 
EXTERNAL_LIBS = -lpthread -lboost_thread -lboost_system -lgmp -lmpfr -lCGAL_Core -lCGAL -loomph_hsl -loomph_crbond_bessel -loomph_triangle -loomph_tetgen -loomph_superlu_4.3 -loomph_metis_from_parmetis_3.1.1 -loomph_lapack -loomph_flapack -loomph_blas
F77 = f77
FC = gfortran
FCFLAGS = -g -O2
FFLAGS = -fallow-argument-mismatch -g -Wall
FFLAGS_NO_OPT = -O0
FGREP = /usr/bin/grep -F
FLIBS =  -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lgfortran -lm -lquadmath
GMP_DIR = /home/runner/work/oomph-lib/oomph-lib/external_distributions/gmp/gmp_default_installation
GMP_INCLUDE = /home/runner/work/oomph-lib/oomph-lib/external_distributions/gmp/gmp_default_installation/include
GMP_LIB = /home/runner/work/oomph-lib/oomph-lib/external_distributions/gmp/gmp_default_installation/lib
GMSH_RUN_COMMAND = 
GREP = /usr/bin/grep
HLIB_INCLUDE = 
HLIB_LIB = 
HYPRE_INCLUDE = 
HYPRE_LIB = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LAPACK_LIB = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} '/home/runner/work/oomph-lib/oomph-lib/missing' makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/bin/mkdir -p
MPFR_DIR = /home/runner/work/oomph-lib/oomph-lib/external_distributions/mpfr/mpfr_default_installation
MPFR_INCLUDE = /home/runner/work/oomph-lib/oomph-lib/external_distributions/mpfr/mpfr_default_installation/include
MPFR_LIB = /home/runner/work/oomph-lib/oomph-lib/external_distributions/mpfr/mpfr_default_installation/lib
MPI_INCLUDE_DIRECTORY = 
MPI_RUN_COMMAND = 
MPI_VARIABLENP_RUN_COMMAND = 
MUMPS_AND_SCALAPACK_INCLUDE = 
MUMPS_AND_SCALAPACK_LIB = 
MUMPS_INCLUDE = 
MUMPS_LIB = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = oomph-lib
PACKAGE_BUGREPORT = oomph-lib@maths.manchester.ac.uk
PACKAGE_NAME = oomph-lib
PACKAGE_STRING = oomph-lib 1.0.0000
PACKAGE_TARNAME = oomph-lib
PACKAGE_URL = 
PACKAGE_VERSION = 1.0.0000
PATH_SEPARATOR = :
PORD_LIB = 
PRIVATE_DIR = 
PRIVATE_SUBDIRECTORIES = 
PRIVATE_USER_DRIVER_SUBDIRECTORIES = 
PRIVATE_USER_SRC_SUBDIRECTORIES = 
RANLIB = ranlib
SCALAPACK_LIB = 
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
TRILINOS_INCLUDE = 
TRILINOS_LIB = 
USER_DRIVERS_SUBDIRECTORIES = jack_cool/ joe_cool/
USER_SRC_SUBDIRECTORIES = jack_cool/
VERSION = 1.0.0000
WILL_BUILD_MUMPS_AND_SCALAPACK = 
abs_builddir = /home/runner/work/oomph-lib/oomph-lib/demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt
abs_srcdir = /home/runner/work/oomph-lib/oomph-lib/demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt
abs_top_builddir = /home/runner/work/oomph-lib/oomph-lib
abs_top_srcdir = /home/runner/work/oomph-lib/oomph-lib
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
ac_ct_FC = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
have_cmake = true
have_doxygen = false
have_libtool = true
have_online_triangle = false
have_pdf_latex = true
have_python = true
have_tetgen = false
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/runner/work/oomph-lib/oomph-lib/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/runner/work/oomph-lib/oomph-lib/build
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
TESTS_ENVIRONMENT = MPI_RUN_COMMAND='' MPI_VARIABLENP_RUN_COMMAND=''
#TESTS = $(top_builddir)/bin/dummy_validate.sh
TESTS = $(top_builddir)/bin/wrapper_for_validate.sh 

# Distribute validation script and validation data

#-------------------------------------------------
EXTRA_DIST = validate.sh validata backup.bash plot_sb_melt.bash \
	crop.bash plot_solar_radiation.bash debug.bash \
	plot_solid_contact.bash plot_circular_boulder_melt.bash \
	plot_spring_contact_landscape.bash plot_hertz.bash \
	re-enumerate.bash plot_melt.bash run_sb_melt.bash \
	plot_melt_with_free_penetrator.bash run_solid_contact.bash \
	plot_pseudo_melt.bash run_spring_contact.bash plot_sb.bash \
	plot_linear_hertz.bash before_and_after_contact_pressure.pvsm \
	solar_radiation_cones.pvsm bins.pvsm solar_radiation.pvsm \
	circular_boulder_melt.pvsm solid_contact.pvsm \
	compare_displ.pvsm solid_contact_with_newton_iter.pvsm \
	displ.pvsm spring_contact_landscape.pvsm hertz_validation.pvsm \
	stefan_boltzmann_melt.pvsm melt.pvsm stefan_boltzmann.pvsm \
	proper_melt.pvsm stefan_boltzmann_rays.pvsm pseudo_melt.pvsm \
	linear_hertz_validation.pvsm contact.map \
	stefan_boltzmann_melt_validation.map view_factor.map exact.map \
	stefan_boltzmann_validation.map \
	heated_linear_hertz_validation.pvsm \
	plot_heated_linear_hertz.bash animate.py

#-------------------------------------------------

# Sources for executable
solid_contact_SOURCES = solid_contact.cc 

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
solid_contact_LDADD = -L${exec_prefix}/lib  -lsolid -lconstitutive -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
heated_linear_solid_contact_with_gravity_SOURCES = heated_linear_solid_contact_with_gravity.cc contact_elements.h

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
heated_linear_solid_contact_with_gravity_LDADD = -L${exec_prefix}/lib -lunsteady_heat -llinear_elasticity \
                                -lconstitutive \
                                -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
linear_solid_contact_with_gravity_unstructured_SOURCES = linear_solid_contact_with_gravity.cc 

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
linear_solid_contact_with_gravity_unstructured_LDADD = -L${exec_prefix}/lib -llinear_elasticity \
                                -lconstitutive \
                                -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
linear_solid_contact_with_gravity_structured_SOURCES = linear_solid_contact_with_gravity.cc

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
linear_solid_contact_with_gravity_structured_LDADD = -L${exec_prefix}/lib -llinear_elasticity \
                                -lconstitutive \
                                -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)

linear_solid_contact_with_gravity_structured_CXXFLAGS = -DSTRUCTURED_MESH

#-------------------------------------------------

# Sources for executable
solid_contact_with_gravity_structured_SOURCES = solid_contact_with_gravity.cc \
contact_elements.h


# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
solid_contact_with_gravity_structured_LDADD = -L${exec_prefix}/lib -lconstitutive \
                                -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)

solid_contact_with_gravity_structured_CXXFLAGS = -DSTRUCTURED_MESH

#-------------------------------------------------

# Sources for executable
solid_contact_with_gravity_unstructured_SOURCES = solid_contact_with_gravity.cc \
contact_elements.h


# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
solid_contact_with_gravity_unstructured_LDADD = -L${exec_prefix}/lib -lconstitutive \
                                -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
circular_boulder_melt_SOURCES = circular_boulder_melt.cc 

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
circular_boulder_melt_LDADD = -L${exec_prefix}/lib -lunsteady_heat -lconstitutive -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
circular_boulder_solar_radiation_SOURCES = circular_boulder_solar_radiation.cc 

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
circular_boulder_solar_radiation_LDADD = -L${exec_prefix}/lib -lunsteady_heat -lconstitutive -lsolid -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
two_d_unsteady_heat_SOURCES = two_d_unsteady_heat.cc

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
two_d_unsteady_heat_LDADD = -L${exec_prefix}/lib -lunsteady_heat -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
spring_contact_SOURCES = spring_contact.cc

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
spring_contact_LDADD = -L${exec_prefix}/lib -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
spring_contact2_SOURCES = spring_contact2.cc

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
spring_contact2_LDADD = -L${exec_prefix}/lib -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
pretend_melt_SOURCES = pretend_melt.cc unsteady_heat_flux_pseudo_melt_elements.h

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
pretend_melt_LDADD = -L${exec_prefix}/lib -lunsteady_heat -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
melt_SOURCES = melt.cc heat_transfer_and_melt_elements.h

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
melt_LDADD = -L${exec_prefix}/lib -lconstitutive -lsolid -lunsteady_heat -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
stefan_boltzmann_SOURCES = stefan_boltzmann.cc temporary_stefan_boltzmann_elements.h

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
stefan_boltzmann_LDADD = -L${exec_prefix}/lib -lconstitutive -lsolid -lunsteady_heat -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)


#-------------------------------------------------

# Sources for executable
stefan_boltzmann_melt_SOURCES = stefan_boltzmann_melt.cc heat_transfer_and_melt_elements.h temporary_stefan_boltzmann_elements.h

# Required libraries:
# $(FLIBS) is included in case the solver involves fortran sources.
stefan_boltzmann_melt_LDADD = -L${exec_prefix}/lib -lconstitutive -lsolid -lunsteady_heat -lgeneric \
				$(EXTERNAL_LIBS) $(FLIBS)

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/makefile_templates/demo_drivers $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign demo_drivers/heat_transfer_and_melting/two_d_unsteady_heat_melt/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/makefile_templates/demo_drivers $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

circular_boulder_melt$(EXEEXT): $(circular_boulder_melt_OBJECTS) $(circular_boulder_melt_DEPENDENCIES) $(EXTRA_circular_boulder_melt_DEPENDENCIES) 
	@rm -f circular_boulder_melt$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(circular_boulder_melt_OBJECTS) $(circular_boulder_melt_LDADD) $(LIBS)

circular_boulder_solar_radiation$(EXEEXT): $(circular_boulder_solar_radiation_OBJECTS) $(circular_boulder_solar_radiation_DEPENDENCIES) $(EXTRA_circular_boulder_solar_radiation_DEPENDENCIES) 
	@rm -f circular_boulder_solar_radiation$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(circular_boulder_solar_radiation_OBJECTS) $(circular_boulder_solar_radiation_LDADD) $(LIBS)

heated_linear_solid_contact_with_gravity$(EXEEXT): $(heated_linear_solid_contact_with_gravity_OBJECTS) $(heated_linear_solid_contact_with_gravity_DEPENDENCIES) $(EXTRA_heated_linear_solid_contact_with_gravity_DEPENDENCIES) 
	@rm -f heated_linear_solid_contact_with_gravity$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(heated_linear_solid_contact_with_gravity_OBJECTS) $(heated_linear_solid_contact_with_gravity_LDADD) $(LIBS)

linear_solid_contact_with_gravity_structured$(EXEEXT): $(linear_solid_contact_with_gravity_structured_OBJECTS) $(linear_solid_contact_with_gravity_structured_DEPENDENCIES) $(EXTRA_linear_solid_contact_with_gravity_structured_DEPENDENCIES) 
	@rm -f linear_solid_contact_with_gravity_structured$(EXEEXT)
	$(AM_V_CXXLD)$(linear_solid_contact_with_gravity_structured_LINK) $(linear_solid_contact_with_gravity_structured_OBJECTS) $(linear_solid_contact_with_gravity_structured_LDADD) $(LIBS)

linear_solid_contact_with_gravity_unstructured$(EXEEXT): $(linear_solid_contact_with_gravity_unstructured_OBJECTS) $(linear_solid_contact_with_gravity_unstructured_DEPENDENCIES) $(EXTRA_linear_solid_contact_with_gravity_unstructured_DEPENDENCIES) 
	@rm -f linear_solid_contact_with_gravity_unstructured$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(linear_solid_contact_with_gravity_unstructured_OBJECTS) $(linear_solid_contact_with_gravity_unstructured_LDADD) $(LIBS)

melt$(EXEEXT): $(melt_OBJECTS) $(melt_DEPENDENCIES) $(EXTRA_melt_DEPENDENCIES) 
	@rm -f melt$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(melt_OBJECTS) $(melt_LDADD) $(LIBS)

pretend_melt$(EXEEXT): $(pretend_melt_OBJECTS) $(pretend_melt_DEPENDENCIES) $(EXTRA_pretend_melt_DEPENDENCIES) 
	@rm -f pretend_melt$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(pretend_melt_OBJECTS) $(pretend_melt_LDADD) $(LIBS)

solid_contact$(EXEEXT): $(solid_contact_OBJECTS) $(solid_contact_DEPENDENCIES) $(EXTRA_solid_contact_DEPENDENCIES) 
	@rm -f solid_contact$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(solid_contact_OBJECTS) $(solid_contact_LDADD) $(LIBS)

solid_contact_with_gravity_structured$(EXEEXT): $(solid_contact_with_gravity_structured_OBJECTS) $(solid_contact_with_gravity_structured_DEPENDENCIES) $(EXTRA_solid_contact_with_gravity_structured_DEPENDENCIES) 
	@rm -f solid_contact_with_gravity_structured$(EXEEXT)
	$(AM_V_CXXLD)$(solid_contact_with_gravity_structured_LINK) $(solid_contact_with_gravity_structured_OBJECTS) $(solid_contact_with_gravity_structured_LDADD) $(LIBS)

solid_contact_with_gravity_unstructured$(EXEEXT): $(solid_contact_with_gravity_unstructured_OBJECTS) $(solid_contact_with_gravity_unstructured_DEPENDENCIES) $(EXTRA_solid_contact_with_gravity_unstructured_DEPENDENCIES) 
	@rm -f solid_contact_with_gravity_unstructured$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(solid_contact_with_gravity_unstructured_OBJECTS) $(solid_contact_with_gravity_unstructured_LDADD) $(LIBS)

spring_contact$(EXEEXT): $(spring_contact_OBJECTS) $(spring_contact_DEPENDENCIES) $(EXTRA_spring_contact_DEPENDENCIES) 
	@rm -f spring_contact$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(spring_contact_OBJECTS) $(spring_contact_LDADD) $(LIBS)

spring_contact2$(EXEEXT): $(spring_contact2_OBJECTS) $(spring_contact2_DEPENDENCIES) $(EXTRA_spring_contact2_DEPENDENCIES) 
	@rm -f spring_contact2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(spring_contact2_OBJECTS) $(spring_contact2_LDADD) $(LIBS)

stefan_boltzmann$(EXEEXT): $(stefan_boltzmann_OBJECTS) $(stefan_boltzmann_DEPENDENCIES) $(EXTRA_stefan_boltzmann_DEPENDENCIES) 
	@rm -f stefan_boltzmann$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(stefan_boltzmann_OBJECTS) $(stefan_boltzmann_LDADD) $(LIBS)

stefan_boltzmann_melt$(EXEEXT): $(stefan_boltzmann_melt_OBJECTS) $(stefan_boltzmann_melt_DEPENDENCIES) $(EXTRA_stefan_boltzmann_melt_DEPENDENCIES) 
	@rm -f stefan_boltzmann_melt$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(stefan_boltzmann_melt_OBJECTS) $(stefan_boltzmann_melt_LDADD) $(LIBS)

two_d_unsteady_heat$(EXEEXT): $(two_d_unsteady_heat_OBJECTS) $(two_d_unsteady_heat_DEPENDENCIES) $(EXTRA_two_d_unsteady_heat_DEPENDENCIES) 
	@rm -f two_d_unsteady_heat$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(two_d_unsteady_heat_OBJECTS) $(two_d_unsteady_heat_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/circular_boulder_melt.Po # am--include-marker
include ./$(DEPDIR)/circular_boulder_solar_radiation.Po # am--include-marker
include ./$(DEPDIR)/heated_linear_solid_contact_with_gravity.Po # am--include-marker
include ./$(DEPDIR)/linear_solid_contact_with_gravity.Po # am--include-marker
include ./$(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po # am--include-marker
include ./$(DEPDIR)/melt.Po # am--include-marker
include ./$(DEPDIR)/pretend_melt.Po # am--include-marker
include ./$(DEPDIR)/solid_contact.Po # am--include-marker
include ./$(DEPDIR)/solid_contact_with_gravity.Po # am--include-marker
include ./$(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po # am--include-marker
include ./$(DEPDIR)/spring_contact.Po # am--include-marker
include ./$(DEPDIR)/spring_contact2.Po # am--include-marker
include ./$(DEPDIR)/stefan_boltzmann.Po # am--include-marker
include ./$(DEPDIR)/stefan_boltzmann_melt.Po # am--include-marker
include ./$(DEPDIR)/two_d_unsteady_heat.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.o: linear_solid_contact_with_gravity.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linear_solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -MT linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.o -MD -MP -MF $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Tpo -c -o linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.o `test -f 'linear_solid_contact_with_gravity.cc' || echo '$(srcdir)/'`linear_solid_contact_with_gravity.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Tpo $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po
#	$(AM_V_CXX)source='linear_solid_contact_with_gravity.cc' object='linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linear_solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -c -o linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.o `test -f 'linear_solid_contact_with_gravity.cc' || echo '$(srcdir)/'`linear_solid_contact_with_gravity.cc

linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.obj: linear_solid_contact_with_gravity.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linear_solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -MT linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.obj -MD -MP -MF $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Tpo -c -o linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.obj `if test -f 'linear_solid_contact_with_gravity.cc'; then $(CYGPATH_W) 'linear_solid_contact_with_gravity.cc'; else $(CYGPATH_W) '$(srcdir)/linear_solid_contact_with_gravity.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Tpo $(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po
#	$(AM_V_CXX)source='linear_solid_contact_with_gravity.cc' object='linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linear_solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -c -o linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.obj `if test -f 'linear_solid_contact_with_gravity.cc'; then $(CYGPATH_W) 'linear_solid_contact_with_gravity.cc'; else $(CYGPATH_W) '$(srcdir)/linear_solid_contact_with_gravity.cc'; fi`

solid_contact_with_gravity_structured-solid_contact_with_gravity.o: solid_contact_with_gravity.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -MT solid_contact_with_gravity_structured-solid_contact_with_gravity.o -MD -MP -MF $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Tpo -c -o solid_contact_with_gravity_structured-solid_contact_with_gravity.o `test -f 'solid_contact_with_gravity.cc' || echo '$(srcdir)/'`solid_contact_with_gravity.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Tpo $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po
#	$(AM_V_CXX)source='solid_contact_with_gravity.cc' object='solid_contact_with_gravity_structured-solid_contact_with_gravity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -c -o solid_contact_with_gravity_structured-solid_contact_with_gravity.o `test -f 'solid_contact_with_gravity.cc' || echo '$(srcdir)/'`solid_contact_with_gravity.cc

solid_contact_with_gravity_structured-solid_contact_with_gravity.obj: solid_contact_with_gravity.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -MT solid_contact_with_gravity_structured-solid_contact_with_gravity.obj -MD -MP -MF $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Tpo -c -o solid_contact_with_gravity_structured-solid_contact_with_gravity.obj `if test -f 'solid_contact_with_gravity.cc'; then $(CYGPATH_W) 'solid_contact_with_gravity.cc'; else $(CYGPATH_W) '$(srcdir)/solid_contact_with_gravity.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Tpo $(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po
#	$(AM_V_CXX)source='solid_contact_with_gravity.cc' object='solid_contact_with_gravity_structured-solid_contact_with_gravity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(solid_contact_with_gravity_structured_CXXFLAGS) $(CXXFLAGS) -c -o solid_contact_with_gravity_structured-solid_contact_with_gravity.obj `if test -f 'solid_contact_with_gravity.cc'; then $(CYGPATH_W) 'solid_contact_with_gravity.cc'; else $(CYGPATH_W) '$(srcdir)/solid_contact_with_gravity.cc'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst $(AM_TESTS_FD_REDIRECT); then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/circular_boulder_melt.Po
	-rm -f ./$(DEPDIR)/circular_boulder_solar_radiation.Po
	-rm -f ./$(DEPDIR)/heated_linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/melt.Po
	-rm -f ./$(DEPDIR)/pretend_melt.Po
	-rm -f ./$(DEPDIR)/solid_contact.Po
	-rm -f ./$(DEPDIR)/solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/spring_contact.Po
	-rm -f ./$(DEPDIR)/spring_contact2.Po
	-rm -f ./$(DEPDIR)/stefan_boltzmann.Po
	-rm -f ./$(DEPDIR)/stefan_boltzmann_melt.Po
	-rm -f ./$(DEPDIR)/two_d_unsteady_heat.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/circular_boulder_melt.Po
	-rm -f ./$(DEPDIR)/circular_boulder_solar_radiation.Po
	-rm -f ./$(DEPDIR)/heated_linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/linear_solid_contact_with_gravity_structured-linear_solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/melt.Po
	-rm -f ./$(DEPDIR)/pretend_melt.Po
	-rm -f ./$(DEPDIR)/solid_contact.Po
	-rm -f ./$(DEPDIR)/solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/solid_contact_with_gravity_structured-solid_contact_with_gravity.Po
	-rm -f ./$(DEPDIR)/spring_contact.Po
	-rm -f ./$(DEPDIR)/spring_contact2.Po
	-rm -f ./$(DEPDIR)/stefan_boltzmann.Po
	-rm -f ./$(DEPDIR)/stefan_boltzmann_melt.Po
	-rm -f ./$(DEPDIR)/two_d_unsteady_heat.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am clean clean-checkPROGRAMS clean-generic clean-libtool \
	clean-local cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# Choose self tests
  # Test script
#  # Just run the executables

#Additional cleanup commands
clean-local: 
	rm -rf validate_sh_timing_generated_by_make_check.dat Validation *~

# Print top_builddir
print-top_builddir: 
	echo $(top_builddir)

# Check if the executables exist
check-if-executables-exist: 
	$(top_builddir)/bin/check_if_executable_exists.bash `echo $(check_PROGRAMS)`

# Get command to run gmsh on command line
spit_out_gmsh_command:
	@echo $(GMSH_RUN_COMMAND)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
