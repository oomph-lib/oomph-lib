//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC// Copyright (C) 2006-2021 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for elements that solve the advection diffusion equation 
//and that can be refined.

#ifndef OOMPH_REFINEABLE_ADVECTION_DIFFUSION_REACTION_ELEMENTS_HEADER
#define OOMPH_REFINEABLE_ADVECTION_DIFFUSION_REACTION_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

//oomph-lib headers
#include "../generic/refineable_quad_element.h"
#include "../generic/refineable_brick_element.h"
#include "../generic/error_estimator.h"
#include "advection_diffusion_reaction_elements.h"

namespace oomph
{

//======================================================================
/// \short A version of the Advection Diffusion Reaction equations that can be
/// used with non-uniform mesh refinement. In essence, the class overloads
/// the fill_in_generic_residual_contribution_adv_diff_react() 
/// function so that contributions
/// from hanging nodes (or alternatively in-compatible function values)
/// are taken into account.
//======================================================================
template <unsigned NREAGENT, unsigned DIM>
class RefineableAdvectionDiffusionReactionEquations : 
 public virtual AdvectionDiffusionReactionEquations<NREAGENT,DIM>,
 public virtual RefineableElement,
 public virtual ElementWithZ2ErrorEstimator
{
  public:

 /// \short Empty Constructor
 RefineableAdvectionDiffusionReactionEquations() : 
  AdvectionDiffusionReactionEquations<NREAGENT,DIM>(),
  RefineableElement(),
  ElementWithZ2ErrorEstimator()
  {} 


 /// Broken copy constructor
 RefineableAdvectionDiffusionReactionEquations(
  const RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>& dummy) 
  { 
   BrokenCopy::broken_copy("RefineableAdvectionDiffusionReactionEquations");
  } 
 
 /// Broken assignment operator
 void operator=(
  const RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>&) 
  {
   BrokenCopy::broken_assign("RefineableAdvectionDiffusionReactionEquations");
  }
 
 /// Number of 'flux' terms for Z2 error estimation 
 unsigned num_Z2_flux_terms() {return NREAGENT*DIM;}
 
 /// \short Get 'flux' for Z2 error recovery:  
 /// Standard flux.from AdvectionDiffusionReaction equations
 void get_Z2_flux(const Vector<double>& s, Vector<double>& flux)
  {this->get_flux(s,flux);}


 /// \short Get the function values c in Vector.
 /// Note: Given the generality of the interface (this function
 /// is usually called from black-box documentation or interpolation routines),
 /// the values Vector sets its own size in here.
 void get_interpolated_values(const Vector<double>&s,  Vector<double>& values)
  {
   // Set size of Vector: c
   values.resize(NREAGENT);
   
   //Find number of nodes
   unsigned n_node = nnode();
   
   //Local shape function
   Shape psi(n_node);
   
   //Find values of shape function
   shape(s,psi);

   //Loop over the unknowns
   for(unsigned r=0;r<NREAGENT;r++)
    {
     unsigned c_nodal_index = this->c_index_adv_diff_react(r);
     
     //Initialise value of c
     values[r] = 0.0;
   
     //Loop over the local nodes and sum
     for(unsigned l=0;l<n_node;l++)
      {
       values[r] += this->nodal_value(l,c_nodal_index)*psi[l];
      }
    }
  }

 /// \short Get the function values c in Vector.
 /// Note: Given the generality of the interface (this function
 /// is usually called from black-box documentation or interpolation routines),
 /// the values Vector sets its own size in here.
 void get_interpolated_values(const unsigned& t, const Vector<double>&s, 
                              Vector<double>& values)
  {
   // Set size of Vector:
   values.resize(NREAGENT);
      
   //Find out how many nodes there are
   const unsigned n_node = nnode();

   // Shape functions
   Shape psi(n_node);
   shape(s,psi);

   //Loop over the reagents
   for(unsigned r=0;r<NREAGENT;r++)
    {
     //Find the nodal index at which the unknown is stored
     unsigned c_nodal_index = this->c_index_adv_diff_react(r);

     // Initialise
     values[r]=0.0;
     
     //Calculate value
     for(unsigned l=0;l<n_node;l++) 
      {
       values[r] += this->nodal_value(t,l,c_nodal_index)*psi[l]; 
      }
    }
  }

 
 ///  Further build: Copy all pointers from the father 
 /// element
 void further_build()
  {
   RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>* 
    cast_father_element_pt 
    = 
    dynamic_cast<RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>*>(
     this->father_element_pt());
   
   //Set the values of the pointers from the father
   this->Source_fct_pt = cast_father_element_pt->source_fct_pt();
   this->Wind_fct_pt = cast_father_element_pt->wind_fct_pt();
   this->Reaction_fct_pt = cast_father_element_pt->reaction_fct_pt();
   this->Reaction_deriv_fct_pt = 
    cast_father_element_pt->reaction_deriv_fct_pt();

   this->Diff_pt = cast_father_element_pt->diff_pt();
   this->Tau_pt = cast_father_element_pt->tau_pt();

   //Set the value of the ALE flag
   this->ALE_is_disabled = cast_father_element_pt->ALE_is_disabled;
  }
 
  protected:
 
 /// \short Add the element's contribution to the elemental residual vector 
/// and/or Jacobian matrix 
/// flag=1: compute both
/// flag=0: compute only residual vector
 void fill_in_generic_residual_contribution_adv_diff_react(
  Vector<double> &residuals, DenseMatrix<double> &jacobian, 
  DenseMatrix<double> &mass_matrix, unsigned flag); 
 
};


//======================================================================
/// \short Refineable version of QAdvectionDiffusionReactionElement. 
/// Inherit from the standard QAdvectionDiffusionReactionElement and the
/// appropriate refineable geometric element and the refineable equations. 
//======================================================================
template <unsigned NREAGENT, unsigned DIM, unsigned NNODE_1D>
class RefineableQAdvectionDiffusionReactionElement : 
 public QAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>,
 public virtual RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>,
 public virtual RefineableQElement<DIM>
{
  public:

 /// \short Empty Constructor: 
  RefineableQAdvectionDiffusionReactionElement() : 
   RefineableElement(),
   RefineableAdvectionDiffusionReactionEquations<NREAGENT,DIM>(),
   RefineableQElement<DIM>(),
   QAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>()
   {} 


 /// Broken copy constructor
 RefineableQAdvectionDiffusionReactionElement(
  const RefineableQAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>& 
  dummy) 
  { 
   BrokenCopy::broken_copy("RefineableQuadAdvectionDiffusionReactionElement");
  } 
 
 /// Broken assignment operator
 void operator=(
  const RefineableQAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("RefineableQuadAdvectionDiffusionReactionElement");
  }
 
 /// Number of continuously interpolated values: NREAGENT
 unsigned ncont_interpolated_values() const {return NREAGENT;}

 /// \short Number of vertex nodes in the element
 unsigned nvertex_node() const
  {return 
    QAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>::nvertex_node();}

 /// \short Pointer to the j-th vertex node in the element
 Node* vertex_node_pt(const unsigned& j) const
  {return 
    QAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D>::vertex_node_pt(j);}

 /// Rebuild from sons: empty
 void rebuild_from_sons(Mesh* &mesh_pt) {}

 /// \short Order of recovery shape functions for Z2 error estimation:
 /// Same order as shape functions.
 unsigned nrecovery_order() {return (NNODE_1D-1);}

 ///  \short Perform additional hanging node procedures for variables
 /// that are not interpolated by all nodes. Empty.
 void further_setup_hanging_nodes(){}

};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// Face geometry for the RefineableQuadAdvectionDiffusionReactionElement elements: The spatial 
/// dimension of the face elements is one lower than that of the
/// bulk element but they have the same number of points
/// along their 1D edges.
//=======================================================================
template<unsigned NREAGENT,unsigned DIM, unsigned NNODE_1D>
class FaceGeometry<
 RefineableQAdvectionDiffusionReactionElement<NREAGENT,DIM,NNODE_1D> >: 
 public virtual QElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : QElement<DIM-1,NNODE_1D>() {}

};

}

#endif

